library(shiny)
library(ggplot2)
library(mvtnorm)
shinyUI(fluidPage(
#Application Title
titlePanel("Discrimination Function"),
sidebarLayout(
sidebarPanel(
numericInput("meanSolApp",
label = h3("Mean Solvency for Approved"),
value = 1),
numericInput("meanSolDen",
label = h3("Mean Solvency for Denied"),
value = 1),
numericInput("sdSolApp",
label = h3("Standard Deviation Solvency for Approved"),
value = 1),
numericInput("sdSolDen",
label = h3("Standard Deviation Solvency for Denied"),
value = 1),
numericInput("meanPIApp",
label = h3("Mean PI for Approved"),
value = 1),
numericInput("meanPIDen",
label = h3("Mean PI for Denied"),
value = 1),
numericInput("sdPIApp",
label = h3("Standard Deviation PI for Approved"),
value = 1),
numericInput("sdPIDen",
label = h3("Standard Deviation PI for Denied"),
value = 1)
),
mainPanel(
plotOutput("data_plot", height = "600px"),
div(tableOutput("confusion_matrix"), style = "font-size:200%")
)
)
)
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
sigmaXY <- function(rho, sdX, sdY) {
covTerm <- rho * sdX * sdY
VCmatrix <- matrix(c(sdX^2, covTerm, covTerm, sdY^2), 2, 2, byrow = TRUE)
return(VCmatrix)
}
genBVN <- function(n = 1, seed = NA, muXY=c(0,1), sigmaXY=diag(2)) {
if(!is.na(seed)) set.seed(seed)
rdraws <- rmvnorm(n, mean = muXY, sigma = sigmaXY)
return(rdraws)
}
sigmaXY()
sigmaXY(3,0.2,0.1)
genBVN(1,1234)
genBVN()
shiny::runApp()
